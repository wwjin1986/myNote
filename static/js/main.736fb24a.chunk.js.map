{"version":3,"sources":["commons/fetchGetAPI.jsx","commons/fetchPostAPI.jsx","components/Note.jsx","components/NavBar.jsx","App.js","serviceWorker.js","index.js"],"names":["fetchGetAPI","url","a","fetch","method","mode","headers","cache","then","response","json","catch","error","res","fetchPostAPI","body","Note","state","topic","title","URL","noteText","categories","showModal","modalTopic","modalCategory","handleSubmit","JSON","stringify","config","apiEndPoint","handleChangeTopic","event","target","value","handleToggleModal","setState","handleChangeTitle","handleChangeURL","handleChangeNotes","handleChangeTopicModal","console","log","handleChangeCategoryModal","handleSubmitNewTopic","category","data","Object","keys","length","Fragment","className","id","onChange","this","defaultValue","map","key","Modal","isOpen","ModalHeader","ModalBody","type","placeholder","ModalFooter","onClick","readOnly","aria-describedby","cols","rows","Component","NavBar","to","data-toggle","data-target","aria-controls","aria-expanded","aria-label","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.736fb24a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nconst fetchGetAPI = async url => {\n  let res = await fetch(url, {\n    method: \"GET\", // *GET, POST, PUT, DELETE, etc.\n    mode: \"cors\", // no-cors, cors, *same-origin\n    headers: {\n      \"Content-Type\": \"application/json;charset=utf-8\"\n    },\n    cache: \"no-cache\" // *default, no-cache, reload, force-cache, only-if-cached // body data type must match \"Content-Type\" header\n  })\n    .then(response => response.json())\n    .catch(error => {\n      return error;\n    });\n  return res;\n};\n\nexport default fetchGetAPI;\n","const fetchPostAPI = async (url, body) => {\n  await fetch(url, {\n    method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n    mode: \"cors\", // no-cors, cors, *same-origin\n    headers: {\n      \"Content-Type\": \"application/json;charset=utf-8\"\n    },\n    body: body,\n    cache: \"no-cache\" // *default, no-cache, reload, force-cache, only-if-cached // body data type must match \"Content-Type\" header\n  });\n};\n\nexport default fetchPostAPI;\n","import React, { Component } from \"react\";\nimport \"../css/Note.css\";\nimport fetchGetAPI from \"../commons/fetchGetAPI\";\nimport config from \"../commons/config.json\";\nimport fetchPostAPI from \"../commons/fetchPostAPI\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\nclass Note extends Component {\n  state = {\n    topic: \"Choose...\",\n    title: \"\",\n    URL: \"\",\n    noteText: \"\",\n    categories: [],\n    showModal: false,\n    modalTopic: \"\",\n    modalCategory: \"\"\n  };\n\n  async componentDidMount() {\n    fetchGetAPI(config.apiEndPoint + \"/categories\")\n      .then(data =>\n        Object.keys(data).length\n          ? this.setState({\n              categories: data\n            })\n          : {}\n      )\n      .catch(error => {\n        throw error;\n      });\n  }\n  handleSubmit = () => {\n    let body = JSON.stringify({\n      topic: this.state.topic,\n      title: this.state.title,\n      url: this.state.URL,\n      noteText: this.state.noteText\n    });\n    fetchPostAPI(config.apiEndPoint + \"/notes\", body);\n  };\n  handleChangeTopic = event => {\n    if (event.target.value === \"Add\") this.handleToggleModal();\n    else {\n      this.setState({ topic: event.target.value });\n    }\n  };\n  handleChangeTitle = event => {\n    this.setState({ title: event.target.value });\n  };\n  handleChangeURL = event => {\n    this.setState({ URL: event.target.value });\n  };\n  handleChangeNotes = event => {\n    this.setState({ noteText: event.target.value });\n  };\n  handleToggleModal = () => {\n    this.state.showModal === false\n      ? this.setState({ showModal: true })\n      : this.setState({ showModal: false });\n  };\n\n  handleChangeTopicModal = event => {\n    this.setState({ modalTopic: event.target.value }, () =>\n      console.log(this.state.modalTopic)\n    );\n  };\n  handleChangeCategoryModal = event => {\n    this.setState({ modalCategory: event.target.value }, () =>\n      console.log(this.state.modalCategory)\n    );\n  };\n  handleSubmitNewTopic = () => {\n    let body = JSON.stringify({\n      topic: this.state.modalTopic,\n      category: this.state.modalCategory\n    });\n    //save to table category\n    fetchPostAPI(config.apiEndPoint + \"/categories\", body);\n    //fetch table category to update topic options\n    fetchGetAPI(config.apiEndPoint + \"/categories\")\n      .then(data =>\n        Object.keys(data).length\n          ? this.setState({\n              categories: data\n            })\n          : {}\n      )\n      .catch(error => {\n        throw error;\n      });\n    this.setState({ showModal: false });\n  };\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"Note-header\">Add new note</div>\n        <div className=\"Note-body\">\n          <div className=\"Note-form\">\n            <form>\n              <div className=\"form-group\">\n                <label className=\"my-1 mr-2\">Topic</label>{\" \"}\n                <select\n                  className=\"custom-select my-1 mr-sm-2\"\n                  id=\"inlineFormCustomSelectPref\"\n                  onChange={this.handleChangeTopic}\n                  value={this.state.value}\n                >\n                  <option defaultValue>Choose...</option>\n                  {this.state.categories.map(category => (\n                    <option key={category.id} value={category.topic}>\n                      {category.topic}\n                    </option>\n                  ))}\n\n                  <option value=\"Add\">Add new topic</option>\n                </select>\n              </div>\n\n              <div>\n                <Modal isOpen={this.state.showModal}>\n                  <ModalHeader>Add new topic</ModalHeader>\n                  <ModalBody className=\"ModalBody\">\n                    <div className=\"row\">\n                      <div className=\"form-group col-md-6\">\n                        <label>Topic</label>\n                        <input\n                          type=\"text\"\n                          className=\"form-control\"\n                          id=\"modalTopic\"\n                          placeholder=\"Enter topic name here\"\n                          onChange={this.handleChangeTopicModal}\n                        />\n                      </div>\n                    </div>\n                    <div className=\"row\">\n                      <div className=\"form-group col-md-6\">\n                        <label>Category</label>\n                        <input\n                          type=\"text\"\n                          className=\"form-control\"\n                          id=\"modalCategory\"\n                          onChange={this.handleChangeCategoryModal}\n                        />\n                      </div>\n                    </div>\n                  </ModalBody>\n                  <ModalFooter>\n                    <input\n                      value=\"Submit\"\n                      className=\"btn btn-note-custom\"\n                      onClick={this.handleSubmitNewTopic}\n                      readOnly\n                    />\n                    <input\n                      onClick={this.handleToggleModal}\n                      value=\"Cancel\"\n                      className=\"btn btn-note-custom\"\n                      readOnly\n                    />\n                  </ModalFooter>\n                </Modal>\n              </div>\n\n              <div className=\"form-group\">\n                <label>Title</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"inputTitle\"\n                  aria-describedby=\"titleHelp\"\n                  placeholder=\"Enter title for new note\"\n                  onChange={this.handleChangeTitle}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label>URL</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"inputURL\"\n                  placeholder=\"Enter tutorial url (optional)\"\n                  onChange={this.handleChangeURL}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label>Notes</label>\n                <textarea\n                  className=\"form-control\"\n                  id=\"inputNoteText\"\n                  placeholder=\"Enter note details here\"\n                  cols=\"30\"\n                  rows=\"15\"\n                  onChange={this.handleChangeNotes}\n                />\n              </div>\n              <button\n                type=\"submit\"\n                className=\"btn btn-custom\"\n                onClick={this.handleSubmit}\n              >\n                Submit\n              </button>\n            </form>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Note;\n","import React, { Component } from \"react\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport \"../css/NavBar.css\";\nconst NavBar = () => {\n  return (\n    <div className=\"NavBar \">\n      <nav className=\"navbar navbar-expand-lg navbar-light\">\n        <Link className=\"navbar-brand nav-brand-custom\" to=\"\">\n          My Note\n        </Link>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarNav\"\n          aria-controls=\"navbarNav\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\" />\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item active\">\n              <Link className=\"nav-link nav-custom\" to={\"/today\"}>\n                Home\n              </Link>\n            </li>\n            <li className=\"nav-item active\">\n              <Link className=\"nav-link nav-custom\" to={\"/addexercise\"}>\n                Notes\n              </Link>\n            </li>\n            <li className=\"nav-item active\">\n              <Link className=\"nav-link nav-custom\" to={\"/addweight\"}>\n                Manage\n              </Link>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    </div>\n  );\n};\n\nexport default NavBar;\n","import React from \"react\";\nimport \"./App.css\";\nimport Note from \"./components/Note\";\nimport NavBar from \"./components/NavBar\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <NavBar />\n        </div>\n        <div className=\"App-body\">\n          <Note />\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}