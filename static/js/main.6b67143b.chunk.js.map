{"version":3,"sources":["components/Note.jsx","components/NavBar.jsx","App.js","serviceWorker.js","index.js"],"names":["Note","state","topic","title","URL","notes","handleSubmit","console","log","handleChangeTopic","event","setState","target","value","handleChangeTitle","handleChangeURL","handleChangeNotes","Fragment","className","id","onChange","this","defaultValue","type","aria-describedby","placeholder","cols","rows","onClick","Component","NavBar","to","data-toggle","data-target","aria-controls","aria-expanded","aria-label","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6TA6FeA,G,iNA1FbC,MAAQ,CACNC,MAAO,YACPC,MAAO,GACPC,IAAK,GACLC,MAAO,M,EAETC,aAAe,WACbC,QAAQC,IAAI,EAAKP,MAAMI,Q,EAEzBI,kBAAoB,SAAAC,GAClB,EAAKC,SAAS,CAAET,MAAOQ,EAAME,OAAOC,S,EAEtCC,kBAAoB,SAAAJ,GAClB,EAAKC,SAAS,CAAER,MAAOO,EAAME,OAAOC,S,EAEtCE,gBAAkB,SAAAL,GAChB,EAAKC,SAAS,CAAEP,IAAKM,EAAME,OAAOC,S,EAEpCG,kBAAoB,SAAAN,GAClB,EAAKC,SAAS,CAAEN,MAAOK,EAAME,OAAOC,S,wEAGpC,OACE,kBAAC,IAAMI,SAAP,KACE,yBAAKC,UAAU,eAAf,gBACA,yBAAKA,UAAU,aACb,yBAAKA,UAAU,aACb,8BACE,yBAAKA,UAAU,cACb,2BAAOA,UAAU,aAAjB,SACA,4BACEA,UAAU,6BACVC,GAAG,6BACHC,SAAUC,KAAKZ,kBACfI,MAAOQ,KAAKpB,MAAMY,OAElB,4BAAQS,cAAY,GAApB,aACA,4BAAQT,MAAM,QAAd,QACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,OAAd,mBAGJ,yBAAKK,UAAU,cACb,wCACA,2BACEK,KAAK,OACLL,UAAU,eACVC,GAAG,aACHK,mBAAiB,YACjBC,YAAY,2BACZL,SAAUC,KAAKP,qBAGnB,yBAAKI,UAAU,cACb,sCACA,2BACEK,KAAK,OACLL,UAAU,eACVC,GAAG,WACHM,YAAY,gCACZL,SAAUC,KAAKN,mBAGnB,yBAAKG,UAAU,cACb,wCACA,8BACEA,UAAU,eACVC,GAAG,gBACHM,YAAY,0BACZC,KAAK,KACLC,KAAK,KACLP,SAAUC,KAAKL,qBAGnB,4BACEO,KAAK,SACLL,UAAU,iBACVU,QAASP,KAAKf,cAHhB,kB,GA5EKuB,c,OC2CJC,G,MA1CA,WACb,OACE,yBAAKZ,UAAU,WACb,yBAAKA,UAAU,wCACb,kBAAC,IAAD,CAAMA,UAAU,gCAAgCa,GAAG,IAAnD,WAGA,4BACEb,UAAU,iBACVK,KAAK,SACLS,cAAY,WACZC,cAAY,aACZC,gBAAc,YACdC,gBAAc,QACdC,aAAW,qBAEX,0BAAMlB,UAAU,yBAElB,yBAAKA,UAAU,2BAA2BC,GAAG,aAC3C,wBAAID,UAAU,sBACZ,wBAAIA,UAAU,mBACZ,kBAAC,IAAD,CAAMA,UAAU,sBAAsBa,GAAI,UAA1C,SAIF,wBAAIb,UAAU,mBACZ,kBAAC,IAAD,CAAMA,UAAU,sBAAsBa,GAAI,gBAA1C,UAIF,wBAAIb,UAAU,mBACZ,kBAAC,IAAD,CAAMA,UAAU,sBAAsBa,GAAI,cAA1C,iBCdCM,MAff,WACE,OACE,kBAAC,IAAMpB,SAAP,KACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,cACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,YACb,kBAAC,EAAD,UCDUoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.6b67143b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"../css/Note.css\";\nclass Note extends Component {\n  state = {\n    topic: \"Choose...\",\n    title: \"\",\n    URL: \"\",\n    notes: \"tt\"\n  };\n  handleSubmit = () => {\n    console.log(this.state.notes);\n  };\n  handleChangeTopic = event => {\n    this.setState({ topic: event.target.value });\n  };\n  handleChangeTitle = event => {\n    this.setState({ title: event.target.value });\n  };\n  handleChangeURL = event => {\n    this.setState({ URL: event.target.value });\n  };\n  handleChangeNotes = event => {\n    this.setState({ notes: event.target.value });\n  };\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"Note-header\">Add new note</div>\n        <div className=\"Note-body\">\n          <div className=\"Note-form\">\n            <form>\n              <div className=\"form-group\">\n                <label className=\"my-1 mr-2\">Topic</label>\n                <select\n                  className=\"custom-select my-1 mr-sm-2\"\n                  id=\"inlineFormCustomSelectPref\"\n                  onChange={this.handleChangeTopic}\n                  value={this.state.value}\n                >\n                  <option defaultValue>Choose...</option>\n                  <option value=\"Java\">Java</option>\n                  <option value=\"React\">React</option>\n                  <option value=\"Postgre\">Postgre</option>\n                  <option value=\"Add\">Add new topic</option>\n                </select>\n              </div>\n              <div className=\"form-group\">\n                <label>Title</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"inputTitle\"\n                  aria-describedby=\"titleHelp\"\n                  placeholder=\"Enter title for new note\"\n                  onChange={this.handleChangeTitle}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label>URL</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"inputURL\"\n                  placeholder=\"Enter tutorial url (optional)\"\n                  onChange={this.handleChangeURL}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label>Notes</label>\n                <textarea\n                  className=\"form-control\"\n                  id=\"inputNoteText\"\n                  placeholder=\"Enter note details here\"\n                  cols=\"30\"\n                  rows=\"15\"\n                  onChange={this.handleChangeNotes}\n                />\n              </div>\n              <button\n                type=\"submit\"\n                className=\"btn btn-custom\"\n                onClick={this.handleSubmit}\n              >\n                Submit\n              </button>\n            </form>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Note;\n","import React, { Component } from \"react\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport \"../css/NavBar.css\";\nconst NavBar = () => {\n  return (\n    <div className=\"NavBar \">\n      <nav className=\"navbar navbar-expand-lg navbar-light\">\n        <Link className=\"navbar-brand nav-brand-custom\" to=\"\">\n          My Note\n        </Link>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarNav\"\n          aria-controls=\"navbarNav\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\" />\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item active\">\n              <Link className=\"nav-link nav-custom\" to={\"/today\"}>\n                Home\n              </Link>\n            </li>\n            <li className=\"nav-item active\">\n              <Link className=\"nav-link nav-custom\" to={\"/addexercise\"}>\n                Notes\n              </Link>\n            </li>\n            <li className=\"nav-item active\">\n              <Link className=\"nav-link nav-custom\" to={\"/addweight\"}>\n                Manage\n              </Link>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    </div>\n  );\n};\n\nexport default NavBar;\n","import React from \"react\";\nimport \"./App.css\";\nimport Note from \"./components/Note\";\nimport NavBar from \"./components/NavBar\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <NavBar />\n        </div>\n        <div className=\"App-body\">\n          <Note />\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}